// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Notes...
    // i xx a cccccc ddd jjj
    // ARegister, DRegister, PC, ALU
    
    // A Register Flow
    Not(in=instruction[15], out=aInstruction);
    Or(a=instruction[5], b=aInstruction, out=loadARegister);
    Mux16(a=ALUOut, b=instruction[0..15], sel=aInstruction, out=AVal);
    ARegister(in=AVal , load=loadARegister, out=ARegisterOut, out[0..14]=addressM);

    // M Register Flow
    And(a=instruction[3], b=instruction[15], out=writeM);

    // A or M Flow
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=AorMOut);

    // D Register Flow
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister(in=ALUOut, load=loadDRegister, out=DRegisterOut);

    // ALU Flow
    // 1 11 0 110000 010 000
    ALU(
        x=DRegisterOut, y=AorMOut,

        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],

        zr=zeroALUOut, ng=negativeALUOut,
        out=ALUOut,
        out=outM
    );


    // PC flow

    //// jump conditionals
    
    Not(in=negativeALUOut, out=notNegativeALUOut);
    Not(in=zeroALUOut, out=notZeroALUOut);

    And(a=notNegativeALUOut, b=notZeroALUOut, out=JGT);
    Or(a=notNegativeALUOut, b=zeroALUOut, out=JGE);
    And(a=negativeALUOut, b=notZeroALUOut, out=JLT);
    Or(a=negativeALUOut, b=zeroALUOut, out=JLE);

    Mux4Way(
        a=false,
        b=JGT,
        c=zeroALUOut,
        d=JGE,
        sel=instruction[0..1],
        out=jump0
    );
    Mux4Way(
        a=JLT,
        b=notZeroALUOut,
        c=JLE,
        d=true,
        sel=instruction[0..1],
        out=jump1
    );
    Mux(a=jump0, b=jump1, sel=instruction[2], out=maybeAssertJump);
    And(a=maybeAssertJump, b=instruction[15], out=assertJump);
    PC(in=ARegisterOut , load=assertJump , inc=true , reset=reset, out[0..14]=pc);
}
