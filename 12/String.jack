// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, cur;
    field Array charArray;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength = 0) {
			let maxLength = 1;
		}
		
		let length = maxLength;
        let cur = 0;
        let charArray = Array.new(maxLength);
		
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do charArray.dispose();

		return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return cur;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charArray[j] = c;

		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (cur < length) {
			let charArray[cur] = c;
			let cur = cur + 1;
		}

		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (cur > 0) {
			let cur = cur - 1;
		}

		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index, output;
        var boolean neg;
        
		let output = 0;

        if ((length > 0) & (charArray[0] = 45)) { // "-"
            let neg = true;
            let index = 1;
        }
        else {
            let neg = false;
            let index = 0;
        }
        
		let index = 0;

        while ((index < length) & String.isDigit(charArray[index])){
            let output = (output * 10) + String.charToDigit(charArray[index]);
            let index = index +  1;    
        }
        
        if (neg) {
            return -output;
        }
        else {
            return output;
        }

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let cur = 0;
        
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        
		do setIntHelper(val);
		
		return;
	}

	method void setIntHelper(int number){
		var int nextNum;

		if(number < 10){
			do appendChar(String.digitToChar(number));
		}else{
			let nextNum = number / 10;
			do setIntHelper(nextNum);
			do appendChar(String.digitToChar(number - (nextNum * 10)));
			// with each new number, we move over one tens place.
		}

		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
    
    function boolean isDigit(char c) {
	    return ~(c < 48) & ~(c > 57);
    }

    // ascii code for 0 = 48
    function int charToDigit(char c) {
        return c - 48;

    }
	
	function char digitToChar(int d) {
		return d + 48;
	}
}
