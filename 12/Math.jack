// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384; // https://github.com/xctom/Nand2Tetris/blob/master/projects/12/Math.jack
        // I think this is -1.  
        
        return;
    }


    function boolean bit(int x, int j) {
        // The only bit in twoToThe[j] that is activated is the one we are testing for.  so any result other than 0 means
        // that bit is activated in x.
        return ~((x & twoToThe[j]) = 0);
    }


    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int result;

        let result = x;
        if (x < 0) {
            let result = -x;
        } 

        return result;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    
    function int multiply(int x, int y) {
        var int i, shiftedX, sum;

        let i = 0;
        let shiftedX = x;
        let sum = 0;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;

            let i = i + 1;
            
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
        var boolean pos;

        let pos = ((x < 0) = (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);
    
        if (y > x) {
            let result = 0;
        }
        else {
            let q = Math.divide(x, y + y);
        
            if ((x - (2 * q * y)) < y) {
                let result = q + q;
            }
            else {
                let result = q + q + 1;
            }
        }
        
        if (~pos) {
            let result = -result;
        } 

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, term0, term1;
        
        let y = 0;
        let j = (16 / 2) - 1; // 7
        
        while (j > -1) {
            let term0 = (y + twoToThe[j]);
            let term0 = term0 * term0;
            let term0 = term0 - 1;
            
            if ((term0 < x) & (term0 > 0)) {
                let term1 = y + twoToThe[j];
                
                let y = y + twoToThe[j];
            }  
            
            let j = j - 1;
        }
        
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
