// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    // use the right three bits to get one of the 8 ram8s
    // and then the left 3 pins to select the correct register

    DMux8Way(
        in=load,
        a=loadRAM0,
        b=loadRAM1,
        c=loadRAM2,
        d=loadRAM3,
        e=loadRAM4,
        f=loadRAM5,
        g=loadRAM6,
        h=loadRAM7,
        sel=address[0..2]
    );
    
    RAM8(in=in , load=loadRAM0 , address=address[3..5], out=outRAM0);
    RAM8(in=in , load=loadRAM1 , address=address[3..5], out=outRAM1);
    RAM8(in=in , load=loadRAM2 , address=address[3..5], out=outRAM2);
    RAM8(in=in , load=loadRAM3 , address=address[3..5], out=outRAM3);
    RAM8(in=in , load=loadRAM4 , address=address[3..5], out=outRAM4);
    RAM8(in=in , load=loadRAM5 , address=address[3..5], out=outRAM5);
    RAM8(in=in , load=loadRAM6 , address=address[3..5], out=outRAM6);
    RAM8(in=in , load=loadRAM7 , address=address[3..5], out=outRAM7);

    Mux8Way16(
        a=outRAM0,
        b=outRAM1,
        c=outRAM2,
        d=outRAM3,
        e=outRAM4,
        f=outRAM5,
        g=outRAM6,
        h=outRAM7,
        sel=address[0..2],
        out=out
    );
}
