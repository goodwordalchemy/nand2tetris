// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 loadregisters, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    // Need to make 8 registers and maybe use a mux and demux to get the values

    // Assert load pin at register address
    DMux8Way(
        in=load,
        a=loadregister0,
        b=loadregister1,
        c=loadregister2,
        d=loadregister3,
        e=loadregister4,
        f=loadregister5,
        g=loadregister6,
        h=loadregister7,
        sel=address
    );

    Register(in=in, load=loadregister0, out=out0);
    Register(in=in, load=loadregister1, out=out1);
    Register(in=in, load=loadregister2, out=out2);
    Register(in=in, load=loadregister3, out=out3);
    Register(in=in, load=loadregister4, out=out4);
    Register(in=in, load=loadregister5, out=out5);
    Register(in=in, load=loadregister6, out=out6);
    Register(in=in, load=loadregister7, out=out7);

    Mux8Way16(
        a=out0,
        b=out1,
        c=out2,
        d=out3,
        e=out4,
        f=out5,
        g=out6,
        h=out7,
        sel=address,
        out=out
    );

    
}
